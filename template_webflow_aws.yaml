AWSTemplateFormatVersion: "2010-09-09"
Description: Cloud Formation template to deploy your Webflow static website in AWS.

Parameters:
  BucketName:
    Type: String
  SupportBucketName:
    Type: String
  CNAMEs:
    Description: The list of supported websites.
    Type: CommaDelimitedList

Resources:
  S3TriggerLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  S3TriggerLambdaFunction:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: s3_trigger_artifacts-upload
      Description: Function responsible of uzipping the zip file uploaded and move the files to the correct folder
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
      Role: !GetAtt S3TriggerLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref SupportBucketName
        S3Key: 'lambda_function/s3_trigger_artifacts_upload/package.zip'
  S3SourceBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    DependsOn:
      - S3TriggerLambdaInvokePermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: 's3:ObjectCreated:*'
            Filter:
              S3Key:
                Rules:
                  - Name: prefix
                    Value: artifacts/
                  - Name: suffix
                    Value: .zip
            Function: !GetAtt S3TriggerLambdaFunction.Arn
  S3TriggerLambdaInvokePermission:
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt S3TriggerLambdaFunction.Arn
      Action: 'lambda:InvokeFunction'
      Principal: s3.amazonaws.com
      SourceAccount: !Ref 'AWS::AccountId'
      SourceArn: !Sub 'arn:aws:s3:::${BucketName}'
  CloudFrontLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
  CloudFrontWWWEditPathForOrigin:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CloudFront_WWW_editPathForOriginTest
      Description: Appends .html extension to universal paths, preserving files with other extensions (ex .css)
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
      MemorySize: 128
      Role: !GetAtt CloudFrontLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref SupportBucketName
        S3Key: 'lambda_function/cloudfront_www_edit_path_for_origin/package.zip'
  CloudFrontWWWCheckLanguage:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: CloudFront_WWW_checkLanguageTest
      Description: if there is no language in the URL path, adds it and redirect the user
      Handler: index.handler
      Runtime: nodejs12.x
      Timeout: 300
      MemorySize: 128
      Role: !GetAtt CloudFrontLambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref SupportBucketName
        S3Key: 'lambda_function/cloudfront_www_check_language/package.zip'
  CloudFrontWWW:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Enabled: true
        Comment: CloudFront Distribution for your WWW static website
        Aliases: !Ref CNAMEs
        HttpVersion:
          - http1.1
          - http2
        PriceClass: PriceClass_100
        Origins:
          - S3OriginConfig